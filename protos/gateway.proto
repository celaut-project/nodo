syntax = "proto3";
package gateway;
import "celaut.proto";
import "buffer.proto";

message GasAmount {
    string n = 1;
}

message TokenMessage {
    string token = 1;
}

message EstimatedCost {
    GasAmount cost = 1;
    float variance = 2;
}

message Refund {
    GasAmount amount = 1;
}

message Payment {
    string deposit_token = 1;
    celaut.Service.Api.ContractLedger contract_ledger = 3;
    GasAmount gas_amount = 4;
}

message Metrics {
    GasAmount gas_amount = 1;
}

message Instance {
    optional celaut.Any.Metadata instance_meta = 1;
    celaut.Instance instance = 2;
    optional string token = 3;
}

message Client {
    string client_id = 1;
}

message RecursionGuard {
    string token = 1;
}

message Configuration {
    celaut.Configuration config = 1;
    optional celaut.Sysresources min_sysreq = 2;  // init system specs.
    optional celaut.Sysresources max_sysreq = 3;  // minimun system specs that the node needs to 've for it sometime.
    optional GasAmount initial_gas_amount = 4;
}

message ModifyServiceSystemResourcesOutput {
    celaut.Sysresources sysreq = 1;
    GasAmount gas = 2;
}

message ModifyServiceSystemResourcesInput {
    celaut.Sysresources min_sysreq = 1;
    celaut.Sysresources max_sysreq = 2;
}

// GRPC.

service Gateway {
    rpc StartService( stream buffer.Buffer) returns ( stream buffer.Buffer) {} // Configuration | Hash | Client | RecursionGuard | Service -> Instance
    rpc StopService(stream buffer.Buffer) returns (stream buffer.Buffer) {} // TokenMessage -> Refund
    
    rpc GetInstance(stream buffer.Buffer) returns (stream buffer.Buffer) {} //  -> Instance
    rpc GenerateClient(stream buffer.Buffer) returns (stream buffer.Buffer) {} //  -> Client

    rpc ModifyServiceSystemResources(stream buffer.Buffer) returns (stream buffer.Buffer) {} // ModifyServiceSystemResourcesInput -> 

    rpc Compile(stream buffer.Buffer) returns (stream buffer.Buffer) {} // bytes -> CompileOutputServiceId || compile.ServiceWithMeta

    rpc GetServiceEstimatedCost(stream buffer.Buffer) returns (stream buffer.Buffer) {} // ( celaut.Any.Metadata.HashTag.Hash=H, celaut.Any=S; { H v S } ) -> EstimatedCost
    rpc Payable(stream buffer.Buffer) returns (stream buffer.Buffer) {} // Payment -> Empty
    rpc GetMetrics(stream buffer.Buffer) returns (stream buffer.Buffer) {} // TokenMessage -> Metrics
}